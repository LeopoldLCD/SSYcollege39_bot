import telebot
from telebot import types
import os
import time
import threading

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
TOKEN = 'NONE'
bot = telebot.TeleBot(TOKEN)

SUPPORT_ID = 'NONE'  # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
# –ü—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª–∞–º
USERS_LOG_FILE = 'users_log.txt'
QUESTIONS_LOG_FILE = 'questions_log.txt'
IDEAS_LOG_FILE = 'ideas_log.txt'
user_ids = set()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ª–æ–≥-—Ñ–∞–π–ª–∞
def initialize_user_ids():
    if os.path.exists(USERS_LOG_FILE):
        with open(USERS_LOG_FILE, 'r') as f:
            for line in f:
                user_id = line.strip().split(": ")[1]  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "ID: <id>"
                user_ids.add(user_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–≥
def log_user(user_id):
    if user_id in user_ids:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ ID –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ª–æ–≥–∞—Ö, –º–æ–∂–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ª–æ–≥–∞—Ö. –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π.")
        remove_user_from_log(user_id)  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å

    with open(USERS_LOG_FILE, 'a') as f:
        f.write(f"ID: {user_id}\n")
    user_ids.add(user_id)  # –î–æ–±–∞–≤–ª—è–µ–º ID –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ª–æ–≥–∞
def remove_user_from_log(user_id):
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫—Ä–æ–º–µ —É–¥–∞–ª—è–µ–º–æ–≥–æ
    temp_file = 'temp_users_log.txt'
    with open(USERS_LOG_FILE, 'r') as original:
        with open(temp_file, 'w') as new_file:
            for line in original:
                if line.strip() != f"ID: {user_id}":
                    new_file.write(line)
    # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –Ω–æ–≤—ã–º
    os.replace(temp_file, USERS_LOG_FILE)


@bot.message_handler(commands=['all'])
def broadcast_message(message):
    if message.from_user.id != int(SUPPORT_ID):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    bot.register_next_step_handler(message, process_broadcast_text)


def process_broadcast_text(message):
    broadcast_text = message.text
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
    bot.register_next_step_handler(message, process_broadcast_image, broadcast_text)


def process_broadcast_image(message, broadcast_text):
    if message.content_type != 'photo':
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, process_broadcast_image, broadcast_text)
        return

    image_file_id = message.photo[-1].file_id
    bot.send_message(message.chat.id, "–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...")

    threading.Thread(target=send_broadcast, args=(broadcast_text, image_file_id)).start()


def send_broadcast(text, image_file_id):
    for user_id in user_ids:
        try:
            bot.send_photo(user_id, image_file_id, text)
            time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 1 —Å–µ–∫—É–Ω–¥—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –ª–æ–≥
def log_question(content):
    with open(QUESTIONS_LOG_FILE, 'a') as f:
        f.write(content + "\n")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –ª–æ–≥
def log_idea(content):
    with open(IDEAS_LOG_FILE, 'a') as f:
        f.write(content + "\n")

# –ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫
@bot.message_handler(commands=['start'])
def send_welcome(message):
    log_user(message.chat.id)  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_question = types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –°–°–£")
    btn_idea = types.KeyboardButton("üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ/–ó–∞–º–µ—á–∞–Ω–∏–µ")
    btn_authors = types.KeyboardButton("üë• –ê–≤—Ç–æ—Ä—ã")
    markup.row(btn_question)
    markup.row(btn_idea)
    markup.row(btn_authors)

    bot.send_message(
        message.chat.id,
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –°–°–£"
@bot.message_handler(func=lambda message: message.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –°–°–£")
def ask_question(message):
    markup = types.InlineKeyboardMarkup()
    fill_btn = types.InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å", callback_data="fill_question")
    cancel_btn = types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
    markup.add(fill_btn, cancel_btn)

    bot.send_message(message.chat.id, "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Ñ–æ—Ä–º—É, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ/–ó–∞–º–µ—á–∞–Ω–∏–µ"
@bot.message_handler(func=lambda message: message.text == "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ/–ó–∞–º–µ—á–∞–Ω–∏–µ")
def submit_idea(message):
    markup = types.InlineKeyboardMarkup()
    fill_btn = types.InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å", callback_data="fill_idea")
    cancel_btn = types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
    markup.add(fill_btn, cancel_btn)

    bot.send_message(message.chat.id, "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Ñ–æ—Ä–º—É, —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞—à—É –∏–¥–µ—é:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üë• –ê–≤—Ç–æ—Ä—ã"
@bot.message_handler(func=lambda message: message.text == "üë• –ê–≤—Ç–æ—Ä—ã")
def authors(message):
    markupmes = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("–¢–ì–ö —Å –∫–æ–¥–æ–º", url="https://t.me/leohub_hack")
    markupmes.row(button1)
    bot.send_message(message.chat.id, '–ê–≤—Ç–æ—Ä –±–æ—Ç–∞:\n–ë–∞—Ö—Ç–∏–Ω –õ–µ–æ–Ω–∏–¥ - @SupSSYcollege', reply_markup=markupmes)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ "–ó–∞–ø–æ–ª–Ω–∏—Ç—å" –∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
@bot.callback_query_handler(func=lambda call: call.data.startswith("fill") or call.data == "cancel")
def handle_callbacks(call):
    if call.data == "cancel":
        bot.delete_message(call.message.chat.id, call.message.message_id)
    elif call.data == "fill_question":
        bot.send_message(call.message.chat.id, "–í–∞—à–µ –§–ò–û:")
        bot.register_next_step_handler(call.message, process_fio_question)
    elif call.data == "fill_idea":
        bot.send_message(call.message.chat.id, "–í–∞—à–µ –§–ò–û:")
        bot.register_next_step_handler(call.message, process_fio_idea)

# –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –°–°–£"
def process_fio_question(message):
    user_data = {'fio': message.text}
    bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã:")
    bot.register_next_step_handler(message, process_group_question, user_data)

def process_group_question(message, user_data):
    user_data['group'] = message.text
    bot.send_message(message.chat.id, "–í–∞—à –≤–æ–ø—Ä–æ—Å?")
    bot.register_next_step_handler(message, process_question, user_data)

def process_question(message, user_data):
    user_data['question'] = message.text
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.")

    # –õ–æ–≥–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
    log_question(f"–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –°–°–£\n–§–ò–û: {user_data['fio']}\n–ì—Ä—É–ø–ø–∞: {user_data['group']}\n–í–æ–ø—Ä–æ—Å: {user_data['question']}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}, ID: {message.chat.id} \n")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–µ
    send_to_support(f"–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –°–°–£\n–§–ò–û: {user_data['fio']}\n–ì—Ä—É–ø–ø–∞: {user_data['group']}\n–í–æ–ø—Ä–æ—Å: {user_data['question']}", message)

# –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ/–∑–∞–º–µ—á–∞–Ω–∏–µ"
def process_fio_idea(message):
    user_data = {'fio': message.text}
    bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã:")
    bot.register_next_step_handler(message, process_group_idea, user_data)

def process_group_idea(message, user_data):
    user_data['group'] = message.text
    bot.send_message(message.chat.id, "–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ?")
    bot.register_next_step_handler(message, process_idea, user_data)

def process_idea(message, user_data):
    user_data['idea'] = message.text
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ/–∑–∞–º–µ—á–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.")

    # –õ–æ–≥–∏—Ä—É–µ–º –∏–¥–µ—é
    log_idea(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ/–∑–∞–º–µ—á–∞–Ω–∏–µ\n–§–ò–û: {user_data['fio']}\n–ì—Ä—É–ø–ø–∞: {user_data['group']}\n–ò–¥–µ—è: {user_data['idea']}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}, ID: {message.chat.id} \n")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–µ
    send_to_support(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ/–∑–∞–º–µ—á–∞–Ω–∏–µ\n–§–ò–û: {user_data['fio']}\n–ì—Ä—É–ø–ø–∞: {user_data['group']}\n–ò–¥–µ—è: {user_data['idea']}", message)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–µ
def send_to_support(content, message):
    markup = types.InlineKeyboardMarkup()
    reply_btn = types.InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{message.chat.id}")
    cancel_btn = types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
    markup.add(reply_btn, cancel_btn)

    bot.send_message(SUPPORT_ID, f"{content}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\nID: {message.chat.id}", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("reply_"))
def handle_support_reply(call):
    user_id = int(call.data.split("_")[1])
    bot.send_message(call.message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é?")
    bot.register_next_step_handler(call.message, send_reply_to_user, user_id)

def send_reply_to_user(message, user_id):
    bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –æ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏: {message.text}")
    bot.send_message(SUPPORT_ID, "–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
@bot.message_handler(commands=['question_log'])
def broadcast_message(message):
    if message.from_user.id != int(SUPPORT_ID):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
def send_questions_log(message):
    if os.path.exists(QUESTIONS_LOG_FILE):
        with open(QUESTIONS_LOG_FILE, 'r') as f:
            bot.send_message(message.chat.id, f.read())
    else:
        bot.send_message(message.chat.id, "–õ–æ–≥ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
@bot.message_handler(commands=['ideas_log'])
def broadcast_message(message):
    if message.from_user.id != int(SUPPORT_ID):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
def send_ideas_log(message):
    if os.path.exists(IDEAS_LOG_FILE):
        with open(IDEAS_LOG_FILE, 'r') as f:
            bot.send_message(message.chat.id, f.read())
    else:
        bot.send_message(message.chat.id, "–õ–æ–≥ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø—É—Å—Ç.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è ID –∏–∑ –ª–æ–≥–∞
def clear_duplicate_ids():
    unique_ids = set()
    temp_file = 'temp_users_log.txt'

    # –ß–∏—Ç–∞–µ–º –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(USERS_LOG_FILE, 'r') as original:
        with open(temp_file, 'w') as new_file:
            for line in original:
                user_id = line.strip().split(": ")[1]  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "ID: <id>"
                if user_id not in unique_ids:
                    unique_ids.add(user_id)
                    new_file.write(line)

    # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –Ω–æ–≤—ã–º
    os.replace(temp_file, USERS_LOG_FILE)
    print("–î—É–±–ª–∏–∫–∞—Ç—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ª–æ–≥–æ–≤.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear
@bot.message_handler(commands=['clear'])
def clear_logs(message):
    if message.from_user.id != int(SUPPORT_ID):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    clear_duplicate_ids()  # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ –ª–æ–≥–æ–≤
    bot.send_message(message.chat.id, "–í—Å–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è ID —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ª–æ–≥–æ–≤.")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
initialize_user_ids()
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
