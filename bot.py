import telebot
from telebot import types
import os

# –í–∞—à —Ç–æ–∫–µ–Ω
token = NONE
bot = telebot.TeleBot(token)

# –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤
LOG_DIR = 'logs'
USERS_FILE = 'users.txt'

# –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
def log_message(message):
    user_id = message.from_user.id
    log_file = os.path.join(LOG_DIR, f'{user_id}.txt')
    with open(log_file, 'a', encoding='utf-8') as f:
        f.write(f"{message.from_user.first_name} ({message.from_user.id}): {message.text}\n")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_user(user):
    if not os.path.exists(USERS_FILE):
        with open(USERS_FILE, 'w', encoding='utf-8') as f:
            f.write(f"{user.id}\n")
    else:
        with open(USERS_FILE, 'r+', encoding='utf-8') as f:
            users = f.readlines()
            user_data = f"{user.id}\n"
            if user_data not in users:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                f.write(user_data)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def get_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, 'r', encoding='utf-8') as f:
            users = f.readlines()
            return [int(user.strip()) for user in users]
    return []


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_message(message):
    log_message(message)
    save_user(message.from_user)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    but1 = types.KeyboardButton("–†–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µüóì")
    but2 = types.KeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –°–°–£‚ùì")
    but3 = types.KeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è/–ò–¥–µ–∏üí°")
    but4 = types.KeyboardButton("–ê–≤—Ç–æ—Ä—ã¬©Ô∏è")

    markup.row(but1)
    markup.row(but2)
    markup.row(but3)
    markup.row(but4)

    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! \n–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:",
                     reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types='text')
def message_reply(message):
    log_message(message)
    save_user(message.from_user)

    if message.text == "–†–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µüóì":
        markupmes = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", url=NONE)
        markupmes.row(button1)
        bot.send_message(message.chat.id, '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ', reply_markup=markupmes)

    elif message.text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –°–°–£‚ùì":
        markupmes = types.InlineKeyboardMarkup()
        button2 = types.InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –°–°–£", url=NONE)
        markupmes.row(button2)
        bot.send_message(message.chat.id, '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', reply_markup=markupmes)

    elif message.text == "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è/–ò–¥–µ–∏üí°":
        markupmes = types.InlineKeyboardMarkup()
        button3 = types.InlineKeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è/–ò–¥–µ–∏", url=NONE)
        markupmes.row(button3)
        bot.send_message(message.chat.id, '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –∏–¥–µ–∏', reply_markup=markupmes)

    elif message.text == "–ê–≤—Ç–æ—Ä—ã¬©Ô∏è":
        bot.send_message(message.chat.id, "–ê–≤—Ç–æ—Ä —ç—Ç–æ–≥–æ –±–æ—Ç–∞:\nNONE\n\n"
                                          "–ê–≤—Ç–æ—Ä—ã –±–æ—Ç–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º:\n"
                                          "NONE\n"
                                          "NONE")

    # –û–ø–æ–≤–µ—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: NONE <—Å–æ–æ–±—â–µ–Ω–∏–µ>
    elif message.text.startswith(NONE):
        notification_message = message.text[len(NONE):]  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        send_notifications(notification_message)
        bot.send_message(message.chat.id, '–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.')

    # –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: NONE <id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>
    elif message.text.startswith(NONE):
        try:
            parts = message.text.split(maxsplit=2)
            user_id = int(parts[1])
            personal_message = parts[2]
            send_personal_message(user_id, personal_message)
            bot.send_message(message.chat.id, f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}.')
        except (IndexError, ValueError):
            bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ NONE <id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>.')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
def send_notifications(notification_message):
    users = get_users()
    for user_id in users:
        try:
            bot.send_message(user_id, notification_message)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def send_personal_message(user_id, message):
    try:
        bot.send_message(user_id, message)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.infinity_polling()
